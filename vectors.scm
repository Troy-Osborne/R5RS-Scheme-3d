;;3vectors
(define (normalize_3vector v)
 (let ((mag (3vector_magnitude v))) (3vector (/ (3V_x v) mag) (/ (3V_y v) mag) (/ (3V_z v) mag))))
(define (3vector x y z) 
(cons x (cons y z))) (define (3V_x v) (car v)) (define (3V_y v) (cadr v)) (define (3V_z v) (cddr v))
(define (3vector_magnitude v) 
(sqrt (+ (expt (3V_x v) 2) (expt (3V_y v) 2) (expt (3V_z v) 2))))
(define (vectormap arity function v1 v2) (if (= 1 arity)
                                             (function v1 v2)
                                             (cons (function (car v1) (car v2)) (vectormap (- arity 1) function (cdr v1) (cdr v2)))))
(define (vector_addition arity v1 v2)
 (vectormap arity + v1 v2))
(define (vector_subtraction arity v1 v2)
 (vectormap arity - v1 v2))
(define (3vector_addition v1 v2)
(vectormap 3 + v1 v2))